// Package crds Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// cluster.bytebuilders.dev_clusters.yaml
package crds

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _clusterBytebuildersDev_clustersYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x55\x4d\x6f\x1b\x37\x10\xbd\xeb\x57\x0c\xd0\x43\x2e\xd1\x0a\x6e\x8a\xa2\xd8\x9b\xe1\x14\x85\xd1\x2f\xc3\x0e\x72\x9f\x25\x47\xbb\x8c\xb9\x24\x3b\x33\x54\xab\x16\xfd\xef\x05\xb9\xbb\xd2\xda\x72\xd2\x14\x48\x79\x12\x87\xc3\xc7\xb7\xef\xcd\x8c\x30\xb9\xf7\xc4\xe2\x62\x68\x01\x93\xa3\x3f\x94\x42\xd9\x49\xf3\xf8\x9d\x34\x2e\xee\x0e\x57\x9b\x47\x17\x6c\x0b\x37\x59\x34\x8e\xf7\x24\x31\xb3\xa1\xb7\xb4\x77\xc1\xa9\x8b\x61\x33\x92\xa2\x45\xc5\x76\x03\x60\x98\xb0\x04\xdf\xb9\x91\x44\x71\x4c\x2d\x84\xec\xfd\x06\xc0\x63\x47\x5e\x4a\x0e\x00\xa6\xd4\x3c\xe6\x8e\x38\x90\x52\x7d\x25\xe0\x48\x2d\x74\x47\xa5\x2e\x3b\x6f\x89\x65\x03\x30\x05\x8d\xcf\xa2\xc4\xd2\xcc\x3f\x9a\x75\x56\x63\xe9\xb0\x91\x44\xa6\x00\xf7\x1c\x73\x3a\x5d\xb8\xcc\x9b\x10\x67\x0e\x06\x95\xfa\xc8\x6e\xd9\x6f\xe1\xcc\x68\x0e\x60\x4a\x62\xa2\xa5\xba\x9d\x45\x98\xb0\x6b\xc4\x3b\xd1\x1f\xd7\xd1\x9f\x9c\x68\x3d\x49\x3e\x33\xfa\x33\xf5\x1a\x14\x17\xfa\xec\x91\x4f\xe1\x0d\x80\x98\x98\xa8\x85\x5f\x0a\xad\x84\x86\xec\x06\xe0\x30\xd9\x51\x69\x6d\x01\xad\xad\x2a\xa3\xbf\x63\x17\x94\xf8\x26\xfa\x3c\x86\x13\xe9\x0f\x12\xc3\x1d\xea\xd0\x42\xb3\xf8\xd0\x5c\x98\x50\x73\x17\x3d\xaf\x7b\x9a\xf7\x7a\x2c\x8f\x5b\xd4\x29\x30\x1d\x1f\xae\xd0\xa7\x01\xaf\x26\xce\x66\xa0\x11\xdb\x39\x3f\x26\x0a\xd7\x77\xb7\xef\xdf\x3c\x3c\x09\x03\x24\x8e\x89\x58\x4f\x5a\x4e\x6b\x55\x5a\xab\x28\x80\x25\x31\xec\x92\xd6\x9a\x7b\x55\x00\xa7\x2c\xb0\xa5\xa6\x48\x40\x07\x5a\x54\x20\x3b\x73\x80\xb8\x07\x1d\x9c\x00\x53\x62\x12\x0a\x5a\x3f\xf1\x09\x30\x94\x24\x0c\x10\xbb\x0f\x64\xb4\x81\x07\xe2\x02\x03\x32\xc4\xec\x2d\x98\x18\x0e\xc4\x0a\x4c\x26\xf6\xc1\xfd\x79\xc2\x16\xd0\x58\x1f\xf5\xa8\x34\x5b\x78\x5e\x55\xf5\x80\x1e\x0e\xe8\x33\xbd\x06\x0c\x16\x46\x3c\x02\x53\x79\x05\x72\x58\xe1\xd5\x14\x69\xe0\xe7\xc8\x04\x2e\xec\x63\x0b\x83\x6a\x92\x76\xb7\xeb\x9d\x2e\x2d\x65\xe2\x38\xe6\xe0\xf4\xb8\x33\x31\x28\xbb\x2e\x6b\x64\xd9\x59\x3a\x90\xdf\x89\xeb\xb7\xc8\x66\x70\x4a\x46\x33\xd3\x0e\x93\xdb\x56\xea\x41\x6b\x5f\x8e\xf6\x2b\x9e\x9b\x50\x5e\x3d\xe1\x3a\xf9\x29\xca\x2e\xf4\xab\x83\x5a\xb9\x9f\x70\xa0\xd4\x30\x38\x01\x9c\xaf\x4e\x5f\x71\x16\xba\x84\x8a\x3a\xf7\xdf\x3f\xbc\x83\xe5\xe9\x6a\xc6\x73\xf5\xab\xee\xe7\x8b\x72\xb6\xa0\x08\xe6\xc2\x9e\x78\x32\x71\xcf\x71\xac\x98\x14\x6c\x8a\x2e\x68\xdd\x18\xef\x28\x3c\x97\x5f\x72\x37\x3a\x2d\xbe\xff\x96\x49\xb4\x78\xd5\xc0\x0d\x86\x10\x15\x3a\x82\x9c\x4a\xfd\xda\x06\x6e\x03\xdc\xe0\x48\xfe\x06\x85\xfe\x77\x03\x8a\xd2\xb2\x2d\xc2\x7e\x9e\x05\xeb\x11\xf9\x3c\x79\x52\x6d\x75\xb0\x8c\xb3\xf3\x7a\xb9\xbf\xca\xea\x62\x7c\x7c\x4b\xc9\xc7\xe3\x48\x41\xcb\x1c\x79\x9e\xf1\x51\x4e\xcb\xf5\x7b\x4a\xde\x19\xbc\x80\x06\xd8\x47\x1e\x51\xdb\xd2\x01\x6f\xbe\xfe\x08\x6c\xe9\x8e\x7e\x1e\x88\xcb\x2a\x56\x39\xa6\x67\x45\xb7\x7d\x81\xec\x0b\x09\x0b\x9d\xcf\x52\x4a\x51\xb3\xfc\x17\xad\xae\x0f\xe8\x3c\x76\x9e\xbe\xfc\x57\x97\xfa\x97\x52\xee\xf6\x07\x0a\xc4\x75\x3c\x5d\xa2\x3f\x69\xbd\x5f\x2f\x2e\x94\x3e\x2c\xad\x30\x46\xa9\x83\x8a\x82\x42\x7f\x3e\x5d\x5e\xb8\x80\xad\xb4\xa7\xde\x9a\xff\x8c\x1a\xb8\x55\x30\x91\x99\x24\xc5\x60\x4f\x33\x6e\x3e\x7e\x25\x2b\xdc\xd7\xf0\xfb\xe0\xcc\xf0\x02\xaa\x93\xa5\xc3\x20\x06\x18\xf3\x34\x75\xa1\x3b\x56\xac\xeb\xbb\xdb\xb9\xc3\x9b\x4f\xc9\xf8\xed\x37\x5f\xa8\x78\x2e\xdc\xfb\xf7\x22\xb9\x08\x4e\x02\xb6\xa0\x9c\xa7\xf2\x13\x8d\x8c\x3d\xad\x23\xb9\x3b\x4d\xd8\x85\xc6\x5c\x6a\xf0\xd7\xdf\x9b\x7f\x02\x00\x00\xff\xff\x59\x3a\x6e\xc8\x33\x09\x00\x00")

func clusterBytebuildersDev_clustersYamlBytes() ([]byte, error) {
	return bindataRead(
		_clusterBytebuildersDev_clustersYaml,
		"cluster.bytebuilders.dev_clusters.yaml",
	)
}

func clusterBytebuildersDev_clustersYaml() (*asset, error) {
	bytes, err := clusterBytebuildersDev_clustersYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cluster.bytebuilders.dev_clusters.yaml", size: 2355, mode: os.FileMode(420), modTime: time.Unix(1573722179, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"cluster.bytebuilders.dev_clusters.yaml": clusterBytebuildersDev_clustersYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"cluster.bytebuilders.dev_clusters.yaml": {clusterBytebuildersDev_clustersYaml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
