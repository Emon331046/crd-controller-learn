// Package crds Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// cluster.bytebuilders.dev_clusters.yaml
package crds

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _clusterBytebuildersDev_clustersYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x55\x4d\x6f\xe3\x36\x10\xbd\xfb\x57\x0c\xd0\x43\x2e\x6b\x19\x41\x8b\xa2\xd0\x2d\xc8\x16\x45\xd0\xaf\x20\x59\xec\x7d\x44\x8e\x25\x6e\x28\x92\x9d\x19\xba\x75\x8b\xfe\xf7\x82\x94\x64\x2b\x71\x36\xdd\x1e\xca\x93\x39\x1c\xce\x3c\xbd\xf7\x38\xc6\xe4\x3e\x12\x8b\x8b\xa1\x05\x4c\x8e\xfe\x50\x0a\x65\x27\xcd\xd3\x77\xd2\xb8\xb8\x3b\x5c\x6f\x9e\x5c\xb0\x2d\xdc\x66\xd1\x38\x3e\x90\xc4\xcc\x86\xde\xd3\xde\x05\xa7\x2e\x86\xcd\x48\x8a\x16\x15\xdb\x0d\x80\x61\xc2\x12\xfc\xe0\x46\x12\xc5\x31\xb5\x10\xb2\xf7\x1b\x00\x8f\x1d\x79\x29\x39\x00\x98\x52\xf3\x94\x3b\xe2\x40\x4a\xb5\x4b\xc0\x91\x5a\xe8\x8e\x4a\x5d\x76\xde\x12\xcb\x06\x60\x0a\x1a\x9f\x45\x89\xa5\x99\x7f\x34\xeb\xac\xc6\xd2\x61\x23\x89\x4c\x29\xdc\x73\xcc\xe9\x74\xe1\x32\x6f\xaa\x38\x63\x30\xa8\xd4\x47\x76\xcb\x7e\x0b\x67\x44\x73\x00\x53\x12\x13\x2d\xd5\xed\x4c\xc2\x54\xbb\x46\xbc\x13\xfd\x71\x1d\xfd\xc9\x89\xd6\x93\xe4\x33\xa3\x3f\x43\xaf\x41\x71\xa1\xcf\x1e\xf9\x14\xde\x00\x88\x89\x89\x5a\xf8\xa5\xc0\x4a\x68\xc8\x6e\x00\x0e\x93\x1c\x15\xd6\x16\xd0\xda\xca\x32\xfa\x7b\x76\x41\x89\x6f\xa3\xcf\x63\x38\x81\xfe\x24\x31\xdc\xa3\x0e\x2d\x34\x8b\x0e\xcd\x85\x08\x35\x77\xe1\xf3\xa6\xa7\x79\xaf\xc7\xd2\xdc\xa2\x4e\x81\xe9\xf8\x70\x8d\x3e\x0d\x78\x3d\x61\x36\x03\x8d\xd8\xce\xf9\x31\x51\xb8\xb9\xbf\xfb\xf8\xf5\xe3\xb3\x30\x40\xe2\x98\x88\xf5\xc4\xe5\xb4\x56\xd6\x5a\x45\x01\x2c\x89\x61\x97\xb4\x7a\xee\xaa\x14\x9c\xb2\xc0\x16\x4f\x91\x80\x0e\xb4\xb0\x40\x76\xc6\x00\x71\x0f\x3a\x38\x01\xa6\xc4\x24\x14\xb4\x7e\xe2\xb3\xc2\x50\x92\x30\x40\xec\x3e\x91\xd1\x06\x1e\x89\x4b\x19\x90\x21\x66\x6f\xc1\xc4\x70\x20\x56\x60\x32\xb1\x0f\xee\xcf\x53\x6d\x01\x8d\xb5\xa9\x47\xa5\x59\xc2\xf3\xaa\xac\x07\xf4\x70\x40\x9f\xe9\x1d\x60\xb0\x30\xe2\x11\x98\x4a\x17\xc8\x61\x55\xaf\xa6\x48\x03\x3f\x47\x26\x70\x61\x1f\x5b\x18\x54\x93\xb4\xbb\x5d\xef\x74\x79\x52\x26\x8e\x63\x0e\x4e\x8f\x3b\x13\x83\xb2\xeb\xb2\x46\x96\x9d\xa5\x03\xf9\x9d\xb8\x7e\x8b\x6c\x06\xa7\x64\x34\x33\xed\x30\xb9\x6d\x85\x1e\xb4\xbe\xcb\xd1\x7e\xc5\xf3\x23\x94\xab\x67\x58\x27\x3d\x45\xd9\x85\x7e\x75\x50\x9d\xfb\x86\x02\xc5\xc3\xe0\x04\x70\xbe\x3a\x7d\xc5\x99\xe8\x12\x2a\xec\x3c\x7c\xff\xf8\x01\x96\xd6\x55\x8c\x97\xec\x57\xde\xcf\x17\xe5\x2c\x41\x21\xcc\x85\x3d\xf1\x24\xe2\x9e\xe3\x58\x6b\x52\xb0\x29\xba\xa0\x75\x63\xbc\xa3\xf0\x92\x7e\xc9\xdd\xe8\xb4\xe8\xfe\x5b\x26\xd1\xa2\x55\x03\xb7\x18\x42\x54\xe8\x08\x72\x2a\xfe\xb5\x0d\xdc\x05\xb8\xc5\x91\xfc\x2d\x0a\xfd\xef\x02\x14\xa6\x65\x5b\x88\xfd\x32\x09\xd6\x23\xf2\x65\xf2\xc4\xda\xea\x60\x19\x67\xe7\xf5\xfa\xfb\x2a\xab\x8b\xf1\xe9\x3d\x25\x1f\x8f\x23\x05\x2d\x73\xe4\x65\xc6\x67\x31\x41\xa5\xd4\x31\xbd\x30\xc7\xf6\x95\xa2\x5f\x04\x5b\x51\xb3\xfc\x17\xe0\x37\x07\x74\x1e\x3b\x4f\x0f\x94\xbc\x33\x78\x91\xf4\x06\xf6\xe2\x36\x29\xe6\xb2\x3f\x50\x20\xae\xc3\xe0\xf2\xfa\x33\xa3\xff\x7a\x71\xa1\xb8\xbe\x18\x6f\x8c\x52\xc7\x02\x05\x85\xfe\x7c\xba\x74\xb8\x28\x0b\xb0\x8f\xb3\x93\xe7\xd1\xdf\xc0\x9d\x82\x89\xcc\x24\x29\x06\x7b\x9a\x28\xf3\xf1\x95\xac\xea\xbe\x83\xdf\x07\x67\x86\x57\xaa\x3a\x59\xfc\x0c\x31\xc0\x98\xa7\x19\x07\xdd\xb1\xd6\xba\xb9\xbf\x9b\xdf\x53\x73\x71\x77\x1f\x79\x44\x6d\xcb\xb0\xfa\xf6\x9b\xcf\xb0\x58\x06\x59\x3f\xff\x77\x2d\xeb\x2d\x0b\x5c\xc8\xf3\xef\x2e\xb8\x08\x4e\x04\xb6\xa0\x9c\x27\x13\x89\x46\xc6\x9e\xd6\x91\xdc\x9d\xe6\xd9\x02\x63\xf6\x12\xfc\xf5\xf7\xe6\x9f\x00\x00\x00\xff\xff\xc3\xa7\xb8\xb9\xa1\x08\x00\x00")

func clusterBytebuildersDev_clustersYamlBytes() ([]byte, error) {
	return bindataRead(
		_clusterBytebuildersDev_clustersYaml,
		"cluster.bytebuilders.dev_clusters.yaml",
	)
}

func clusterBytebuildersDev_clustersYaml() (*asset, error) {
	bytes, err := clusterBytebuildersDev_clustersYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cluster.bytebuilders.dev_clusters.yaml", size: 2209, mode: os.FileMode(420), modTime: time.Unix(1573722179, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"cluster.bytebuilders.dev_clusters.yaml": clusterBytebuildersDev_clustersYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"cluster.bytebuilders.dev_clusters.yaml": {clusterBytebuildersDev_clustersYaml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
